// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// BWCpp
NumericVector BWCpp(const NumericVector& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool option, bool B);
RcppExport SEXP _collapse2_BWCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP optionSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< bool >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(BWCpp(x, ng, g, gs, w, narm, option, B));
    return rcpp_result_gen;
END_RCPP
}
// BWmCpp
NumericMatrix BWmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool option, bool B);
RcppExport SEXP _collapse2_BWmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP optionSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< bool >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(BWmCpp(x, ng, g, gs, w, narm, option, B));
    return rcpp_result_gen;
END_RCPP
}
// BWlCpp
List BWlCpp(const List& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool option, bool B);
RcppExport SEXP _collapse2_BWlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP optionSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< bool >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(BWlCpp(x, ng, g, gs, w, narm, option, B));
    return rcpp_result_gen;
END_RCPP
}
// TRACpp
SEXP TRACpp(SEXP x, SEXP xAG, IntegerVector g, int ret);
RcppExport SEXP _collapse2_TRACpp(SEXP xSEXP, SEXP xAGSEXP, SEXP gSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xAG(xAGSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(TRACpp(x, xAG, g, ret));
    return rcpp_result_gen;
END_RCPP
}
// TRAmCpp
SEXP TRAmCpp(SEXP x, SEXP xAG, IntegerVector g, int ret);
RcppExport SEXP _collapse2_TRAmCpp(SEXP xSEXP, SEXP xAGSEXP, SEXP gSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xAG(xAGSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(TRAmCpp(x, xAG, g, ret));
    return rcpp_result_gen;
END_RCPP
}
// TRAlCpp
List TRAlCpp(List x, SEXP xAG, IntegerVector g, int ret);
RcppExport SEXP _collapse2_TRAlCpp(SEXP xSEXP, SEXP xAGSEXP, SEXP gSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xAG(xAGSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(TRAlCpp(x, xAG, g, ret));
    return rcpp_result_gen;
END_RCPP
}
// fNdistinctCpp
SEXP fNdistinctCpp(SEXP x, int ng, IntegerVector g, SEXP gs, bool narm);
RcppExport SEXP _collapse2_fNdistinctCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fNdistinctCpp(x, ng, g, gs, narm));
    return rcpp_result_gen;
END_RCPP
}
// fNdistinctlCpp
SEXP fNdistinctlCpp(const List& x, int ng, const IntegerVector& g, const SEXP& gs, bool narm, bool drop);
RcppExport SEXP _collapse2_fNdistinctlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fNdistinctlCpp(x, ng, g, gs, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fNdistinctmCpp
SEXP fNdistinctmCpp(SEXP x, int ng, IntegerVector g, SEXP gs, bool narm, bool drop);
RcppExport SEXP _collapse2_fNdistinctmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fNdistinctmCpp(x, ng, g, gs, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fbstatsCpp
SEXP fbstatsCpp(const NumericVector& x, bool ext, int ng, const IntegerVector& g, int npg, const IntegerVector& pg, const SEXP& w, bool array, bool setn, const SEXP& gn);
RcppExport SEXP _collapse2_fbstatsCpp(SEXP xSEXP, SEXP extSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP npgSEXP, SEXP pgSEXP, SEXP wSEXP, SEXP arraySEXP, SEXP setnSEXP, SEXP gnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type ext(extSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type npg(npgSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type array(arraySEXP);
    Rcpp::traits::input_parameter< bool >::type setn(setnSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gn(gnSEXP);
    rcpp_result_gen = Rcpp::wrap(fbstatsCpp(x, ext, ng, g, npg, pg, w, array, setn, gn));
    return rcpp_result_gen;
END_RCPP
}
// fbstatsmCpp
SEXP fbstatsmCpp(const NumericMatrix& x, bool ext, int ng, const IntegerVector& g, int npg, const IntegerVector& pg, const SEXP& w, bool array, const SEXP& gn);
RcppExport SEXP _collapse2_fbstatsmCpp(SEXP xSEXP, SEXP extSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP npgSEXP, SEXP pgSEXP, SEXP wSEXP, SEXP arraySEXP, SEXP gnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type ext(extSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type npg(npgSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type array(arraySEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gn(gnSEXP);
    rcpp_result_gen = Rcpp::wrap(fbstatsmCpp(x, ext, ng, g, npg, pg, w, array, gn));
    return rcpp_result_gen;
END_RCPP
}
// fbstatslCpp
SEXP fbstatslCpp(const List& x, bool ext, int ng, const IntegerVector& g, int npg, const IntegerVector& pg, const SEXP& w, bool array, const SEXP& gn);
RcppExport SEXP _collapse2_fbstatslCpp(SEXP xSEXP, SEXP extSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP npgSEXP, SEXP pgSEXP, SEXP wSEXP, SEXP arraySEXP, SEXP gnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type ext(extSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type npg(npgSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type array(arraySEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gn(gnSEXP);
    rcpp_result_gen = Rcpp::wrap(fbstatslCpp(x, ext, ng, g, npg, pg, w, array, gn));
    return rcpp_result_gen;
END_RCPP
}
// fdiffCpp
NumericVector fdiffCpp(const NumericVector& x, const IntegerVector& n, const IntegerVector& diff, double fill, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& t, bool names);
RcppExport SEXP _collapse2_fdiffCpp(SEXP xSEXP, SEXP nSEXP, SEXP diffSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type diff(diffSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(fdiffCpp(x, n, diff, fill, ng, g, gs, t, names));
    return rcpp_result_gen;
END_RCPP
}
// fdiffmCpp
NumericMatrix fdiffmCpp(const NumericMatrix& x, const IntegerVector& n, const IntegerVector& diff, double fill, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& t, bool names);
RcppExport SEXP _collapse2_fdiffmCpp(SEXP xSEXP, SEXP nSEXP, SEXP diffSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type diff(diffSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(fdiffmCpp(x, n, diff, fill, ng, g, gs, t, names));
    return rcpp_result_gen;
END_RCPP
}
// fdifflCpp
List fdifflCpp(const List& x, const IntegerVector& n, const IntegerVector& diff, double fill, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& t, bool names);
RcppExport SEXP _collapse2_fdifflCpp(SEXP xSEXP, SEXP nSEXP, SEXP diffSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type diff(diffSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(fdifflCpp(x, n, diff, fill, ng, g, gs, t, names));
    return rcpp_result_gen;
END_RCPP
}
// ffirstCpp
SEXP ffirstCpp(SEXP x, int ng, IntegerVector g, bool narm);
RcppExport SEXP _collapse2_ffirstCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(ffirstCpp(x, ng, g, narm));
    return rcpp_result_gen;
END_RCPP
}
// ffirstmCpp
SEXP ffirstmCpp(SEXP x, int ng, IntegerVector g, bool narm, bool drop);
RcppExport SEXP _collapse2_ffirstmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(ffirstmCpp(x, ng, g, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// ffirstlCpp
SEXP ffirstlCpp(const List& x, int ng, const IntegerVector& g, bool narm);
RcppExport SEXP _collapse2_ffirstlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(ffirstlCpp(x, ng, g, narm));
    return rcpp_result_gen;
END_RCPP
}
// fgrowthCpp
NumericVector fgrowthCpp(const NumericVector& x, const IntegerVector& n, const IntegerVector& diff, double fill, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& t, bool logdiff, bool names);
RcppExport SEXP _collapse2_fgrowthCpp(SEXP xSEXP, SEXP nSEXP, SEXP diffSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP logdiffSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type diff(diffSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type logdiff(logdiffSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(fgrowthCpp(x, n, diff, fill, ng, g, gs, t, logdiff, names));
    return rcpp_result_gen;
END_RCPP
}
// fgrowthmCpp
NumericMatrix fgrowthmCpp(const NumericMatrix& x, const IntegerVector& n, const IntegerVector& diff, double fill, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& t, bool logdiff, bool names);
RcppExport SEXP _collapse2_fgrowthmCpp(SEXP xSEXP, SEXP nSEXP, SEXP diffSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP logdiffSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type diff(diffSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type logdiff(logdiffSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(fgrowthmCpp(x, n, diff, fill, ng, g, gs, t, logdiff, names));
    return rcpp_result_gen;
END_RCPP
}
// fgrowthlCpp
List fgrowthlCpp(const List& x, const IntegerVector& n, const IntegerVector& diff, double fill, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& t, bool logdiff, bool names);
RcppExport SEXP _collapse2_fgrowthlCpp(SEXP xSEXP, SEXP nSEXP, SEXP diffSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP logdiffSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type diff(diffSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type logdiff(logdiffSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(fgrowthlCpp(x, n, diff, fill, ng, g, gs, t, logdiff, names));
    return rcpp_result_gen;
END_RCPP
}
// flagleadCpp
SEXP flagleadCpp(SEXP x, IntegerVector n, SEXP fill, int ng, IntegerVector g, SEXP gs, SEXP t, bool names);
RcppExport SEXP _collapse2_flagleadCpp(SEXP xSEXP, SEXP nSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(flagleadCpp(x, n, fill, ng, g, gs, t, names));
    return rcpp_result_gen;
END_RCPP
}
// flagleadmCpp
SEXP flagleadmCpp(SEXP x, IntegerVector n, SEXP fill, int ng, IntegerVector g, SEXP gs, SEXP t, bool names);
RcppExport SEXP _collapse2_flagleadmCpp(SEXP xSEXP, SEXP nSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(flagleadmCpp(x, n, fill, ng, g, gs, t, names));
    return rcpp_result_gen;
END_RCPP
}
// flagleadlCpp
List flagleadlCpp(const List& x, const IntegerVector& n, const SEXP& fill, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& t, bool names);
RcppExport SEXP _collapse2_flagleadlCpp(SEXP xSEXP, SEXP nSEXP, SEXP fillSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP tSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(flagleadlCpp(x, n, fill, ng, g, gs, t, names));
    return rcpp_result_gen;
END_RCPP
}
// flastCpp
SEXP flastCpp(SEXP x, int ng, IntegerVector g, bool narm);
RcppExport SEXP _collapse2_flastCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(flastCpp(x, ng, g, narm));
    return rcpp_result_gen;
END_RCPP
}
// flastmCpp
SEXP flastmCpp(SEXP x, int ng, IntegerVector g, bool narm, bool drop);
RcppExport SEXP _collapse2_flastmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(flastmCpp(x, ng, g, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// flastlCpp
SEXP flastlCpp(const List& x, int ng, const IntegerVector& g, bool narm);
RcppExport SEXP _collapse2_flastlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(flastlCpp(x, ng, g, narm));
    return rcpp_result_gen;
END_RCPP
}
// fmaxCpp
NumericVector fmaxCpp(const NumericVector& x, int ng, const IntegerVector& g, bool narm);
RcppExport SEXP _collapse2_fmaxCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fmaxCpp(x, ng, g, narm));
    return rcpp_result_gen;
END_RCPP
}
// fmaxmCpp
SEXP fmaxmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, bool narm, bool drop);
RcppExport SEXP _collapse2_fmaxmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fmaxmCpp(x, ng, g, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fmaxlCpp
SEXP fmaxlCpp(const List& x, int ng, const IntegerVector& g, bool narm, bool drop);
RcppExport SEXP _collapse2_fmaxlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fmaxlCpp(x, ng, g, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fmeanCpp
NumericVector fmeanCpp(const NumericVector& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm);
RcppExport SEXP _collapse2_fmeanCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fmeanCpp(x, ng, g, gs, w, narm));
    return rcpp_result_gen;
END_RCPP
}
// fmeanmCpp
SEXP fmeanmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool drop);
RcppExport SEXP _collapse2_fmeanmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fmeanmCpp(x, ng, g, gs, w, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fmeanlCpp
SEXP fmeanlCpp(const List& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool drop);
RcppExport SEXP _collapse2_fmeanlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fmeanlCpp(x, ng, g, gs, w, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fmedianCpp
NumericVector fmedianCpp(const NumericVector& x, int ng, const IntegerVector& g, const SEXP& gs, bool narm);
RcppExport SEXP _collapse2_fmedianCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fmedianCpp(x, ng, g, gs, narm));
    return rcpp_result_gen;
END_RCPP
}
// fmedianmCpp
SEXP fmedianmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, const SEXP& gs, bool narm, bool drop);
RcppExport SEXP _collapse2_fmedianmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fmedianmCpp(x, ng, g, gs, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fmedianlCpp
SEXP fmedianlCpp(const List& x, int ng, const IntegerVector& g, const SEXP& gs, bool narm, bool drop);
RcppExport SEXP _collapse2_fmedianlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fmedianlCpp(x, ng, g, gs, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fminCpp
NumericVector fminCpp(const NumericVector& x, int ng, const IntegerVector& g, bool narm);
RcppExport SEXP _collapse2_fminCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fminCpp(x, ng, g, narm));
    return rcpp_result_gen;
END_RCPP
}
// fminmCpp
SEXP fminmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, bool narm, bool drop);
RcppExport SEXP _collapse2_fminmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fminmCpp(x, ng, g, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fminlCpp
SEXP fminlCpp(const List& x, int ng, const IntegerVector& g, bool narm, bool drop);
RcppExport SEXP _collapse2_fminlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fminlCpp(x, ng, g, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fmodeCpp
SEXP fmodeCpp(SEXP x, int ng, IntegerVector g, SEXP gs, SEXP w, bool narm);
RcppExport SEXP _collapse2_fmodeCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodeCpp(x, ng, g, gs, w, narm));
    return rcpp_result_gen;
END_RCPP
}
// fmodelCpp
SEXP fmodelCpp(const List& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm);
RcppExport SEXP _collapse2_fmodelCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodelCpp(x, ng, g, gs, w, narm));
    return rcpp_result_gen;
END_RCPP
}
// fmodemCpp
SEXP fmodemCpp(SEXP x, int ng, IntegerVector g, SEXP gs, SEXP w, bool narm, bool drop);
RcppExport SEXP _collapse2_fmodemCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodemCpp(x, ng, g, gs, w, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fnobsCpp
IntegerVector fnobsCpp(SEXP x, int ng, IntegerVector g);
RcppExport SEXP _collapse2_fnobsCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(fnobsCpp(x, ng, g));
    return rcpp_result_gen;
END_RCPP
}
// fnobsmCpp
SEXP fnobsmCpp(SEXP x, int ng, IntegerVector g, bool drop);
RcppExport SEXP _collapse2_fnobsmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fnobsmCpp(x, ng, g, drop));
    return rcpp_result_gen;
END_RCPP
}
// fnobslCpp
SEXP fnobslCpp(List x, int ng, IntegerVector g, bool drop);
RcppExport SEXP _collapse2_fnobslCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fnobslCpp(x, ng, g, drop));
    return rcpp_result_gen;
END_RCPP
}
// fprodCpp
NumericVector fprodCpp(const NumericVector& x, int ng, const IntegerVector& g, bool narm);
RcppExport SEXP _collapse2_fprodCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fprodCpp(x, ng, g, narm));
    return rcpp_result_gen;
END_RCPP
}
// fprodmCpp
SEXP fprodmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, bool narm, bool drop);
RcppExport SEXP _collapse2_fprodmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fprodmCpp(x, ng, g, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fprodlCpp
SEXP fprodlCpp(const List& x, int ng, const IntegerVector& g, bool narm, bool drop);
RcppExport SEXP _collapse2_fprodlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fprodlCpp(x, ng, g, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fscaleCpp
NumericVector fscaleCpp(const NumericVector& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool stable_algo);
RcppExport SEXP _collapse2_fscaleCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP stable_algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type stable_algo(stable_algoSEXP);
    rcpp_result_gen = Rcpp::wrap(fscaleCpp(x, ng, g, gs, w, narm, stable_algo));
    return rcpp_result_gen;
END_RCPP
}
// fscalemCpp
NumericMatrix fscalemCpp(NumericMatrix x, int ng, IntegerVector g, SEXP gs, SEXP w, bool narm, bool stable_algo);
RcppExport SEXP _collapse2_fscalemCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP stable_algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type stable_algo(stable_algoSEXP);
    rcpp_result_gen = Rcpp::wrap(fscalemCpp(x, ng, g, gs, w, narm, stable_algo));
    return rcpp_result_gen;
END_RCPP
}
// fscalelCpp
List fscalelCpp(List x, int ng, IntegerVector g, SEXP gs, SEXP w, bool narm, bool stable_algo);
RcppExport SEXP _collapse2_fscalelCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP stable_algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type stable_algo(stable_algoSEXP);
    rcpp_result_gen = Rcpp::wrap(fscalelCpp(x, ng, g, gs, w, narm, stable_algo));
    return rcpp_result_gen;
END_RCPP
}
// fsumCpp
NumericVector fsumCpp(const NumericVector& x, int ng, const IntegerVector& g, bool narm);
RcppExport SEXP _collapse2_fsumCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fsumCpp(x, ng, g, narm));
    return rcpp_result_gen;
END_RCPP
}
// fsummCpp
SEXP fsummCpp(const NumericMatrix& x, int ng, const IntegerVector& g, bool narm, bool drop);
RcppExport SEXP _collapse2_fsummCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fsummCpp(x, ng, g, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fsumlCpp
SEXP fsumlCpp(const List& x, int ng, const IntegerVector& g, bool narm, bool drop);
RcppExport SEXP _collapse2_fsumlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP narmSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fsumlCpp(x, ng, g, narm, drop));
    return rcpp_result_gen;
END_RCPP
}
// fvarsdCpp
NumericVector fvarsdCpp(const NumericVector& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool stable_algo, bool sd);
RcppExport SEXP _collapse2_fvarsdCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP stable_algoSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type stable_algo(stable_algoSEXP);
    Rcpp::traits::input_parameter< bool >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(fvarsdCpp(x, ng, g, gs, w, narm, stable_algo, sd));
    return rcpp_result_gen;
END_RCPP
}
// fvarsdmCpp
SEXP fvarsdmCpp(const NumericMatrix& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool stable_algo, bool sd, bool drop);
RcppExport SEXP _collapse2_fvarsdmCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP stable_algoSEXP, SEXP sdSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type stable_algo(stable_algoSEXP);
    Rcpp::traits::input_parameter< bool >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fvarsdmCpp(x, ng, g, gs, w, narm, stable_algo, sd, drop));
    return rcpp_result_gen;
END_RCPP
}
// fvarsdlCpp
SEXP fvarsdlCpp(const List& x, int ng, const IntegerVector& g, const SEXP& gs, const SEXP& w, bool narm, bool stable_algo, bool sd, bool drop);
RcppExport SEXP _collapse2_fvarsdlCpp(SEXP xSEXP, SEXP ngSEXP, SEXP gSEXP, SEXP gsSEXP, SEXP wSEXP, SEXP narmSEXP, SEXP stable_algoSEXP, SEXP sdSEXP, SEXP dropSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    Rcpp::traits::input_parameter< bool >::type stable_algo(stable_algoSEXP);
    Rcpp::traits::input_parameter< bool >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type drop(dropSEXP);
    rcpp_result_gen = Rcpp::wrap(fvarsdlCpp(x, ng, g, gs, w, narm, stable_algo, sd, drop));
    return rcpp_result_gen;
END_RCPP
}
// mrtl
SEXP mrtl(SEXP X, bool names, int ret);
RcppExport SEXP _collapse2_mrtl(SEXP XSEXP, SEXP namesSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(mrtl(X, names, ret));
    return rcpp_result_gen;
END_RCPP
}
// mctl
SEXP mctl(SEXP X, bool names, int ret);
RcppExport SEXP _collapse2_mctl(SEXP XSEXP, SEXP namesSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(mctl(X, names, ret));
    return rcpp_result_gen;
END_RCPP
}
// qFCpp
SEXP qFCpp(SEXP x, bool ordered);
RcppExport SEXP _collapse2_qFCpp(SEXP xSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(qFCpp(x, ordered));
    return rcpp_result_gen;
END_RCPP
}
// qGCpp
SEXP qGCpp(SEXP x, bool ordered);
RcppExport SEXP _collapse2_qGCpp(SEXP xSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(qGCpp(x, ordered));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_collapse2_BWCpp", (DL_FUNC) &_collapse2_BWCpp, 8},
    {"_collapse2_BWmCpp", (DL_FUNC) &_collapse2_BWmCpp, 8},
    {"_collapse2_BWlCpp", (DL_FUNC) &_collapse2_BWlCpp, 8},
    {"_collapse2_TRACpp", (DL_FUNC) &_collapse2_TRACpp, 4},
    {"_collapse2_TRAmCpp", (DL_FUNC) &_collapse2_TRAmCpp, 4},
    {"_collapse2_TRAlCpp", (DL_FUNC) &_collapse2_TRAlCpp, 4},
    {"_collapse2_fNdistinctCpp", (DL_FUNC) &_collapse2_fNdistinctCpp, 5},
    {"_collapse2_fNdistinctlCpp", (DL_FUNC) &_collapse2_fNdistinctlCpp, 6},
    {"_collapse2_fNdistinctmCpp", (DL_FUNC) &_collapse2_fNdistinctmCpp, 6},
    {"_collapse2_fbstatsCpp", (DL_FUNC) &_collapse2_fbstatsCpp, 10},
    {"_collapse2_fbstatsmCpp", (DL_FUNC) &_collapse2_fbstatsmCpp, 9},
    {"_collapse2_fbstatslCpp", (DL_FUNC) &_collapse2_fbstatslCpp, 9},
    {"_collapse2_fdiffCpp", (DL_FUNC) &_collapse2_fdiffCpp, 9},
    {"_collapse2_fdiffmCpp", (DL_FUNC) &_collapse2_fdiffmCpp, 9},
    {"_collapse2_fdifflCpp", (DL_FUNC) &_collapse2_fdifflCpp, 9},
    {"_collapse2_ffirstCpp", (DL_FUNC) &_collapse2_ffirstCpp, 4},
    {"_collapse2_ffirstmCpp", (DL_FUNC) &_collapse2_ffirstmCpp, 5},
    {"_collapse2_ffirstlCpp", (DL_FUNC) &_collapse2_ffirstlCpp, 4},
    {"_collapse2_fgrowthCpp", (DL_FUNC) &_collapse2_fgrowthCpp, 10},
    {"_collapse2_fgrowthmCpp", (DL_FUNC) &_collapse2_fgrowthmCpp, 10},
    {"_collapse2_fgrowthlCpp", (DL_FUNC) &_collapse2_fgrowthlCpp, 10},
    {"_collapse2_flagleadCpp", (DL_FUNC) &_collapse2_flagleadCpp, 8},
    {"_collapse2_flagleadmCpp", (DL_FUNC) &_collapse2_flagleadmCpp, 8},
    {"_collapse2_flagleadlCpp", (DL_FUNC) &_collapse2_flagleadlCpp, 8},
    {"_collapse2_flastCpp", (DL_FUNC) &_collapse2_flastCpp, 4},
    {"_collapse2_flastmCpp", (DL_FUNC) &_collapse2_flastmCpp, 5},
    {"_collapse2_flastlCpp", (DL_FUNC) &_collapse2_flastlCpp, 4},
    {"_collapse2_fmaxCpp", (DL_FUNC) &_collapse2_fmaxCpp, 4},
    {"_collapse2_fmaxmCpp", (DL_FUNC) &_collapse2_fmaxmCpp, 5},
    {"_collapse2_fmaxlCpp", (DL_FUNC) &_collapse2_fmaxlCpp, 5},
    {"_collapse2_fmeanCpp", (DL_FUNC) &_collapse2_fmeanCpp, 6},
    {"_collapse2_fmeanmCpp", (DL_FUNC) &_collapse2_fmeanmCpp, 7},
    {"_collapse2_fmeanlCpp", (DL_FUNC) &_collapse2_fmeanlCpp, 7},
    {"_collapse2_fmedianCpp", (DL_FUNC) &_collapse2_fmedianCpp, 5},
    {"_collapse2_fmedianmCpp", (DL_FUNC) &_collapse2_fmedianmCpp, 6},
    {"_collapse2_fmedianlCpp", (DL_FUNC) &_collapse2_fmedianlCpp, 6},
    {"_collapse2_fminCpp", (DL_FUNC) &_collapse2_fminCpp, 4},
    {"_collapse2_fminmCpp", (DL_FUNC) &_collapse2_fminmCpp, 5},
    {"_collapse2_fminlCpp", (DL_FUNC) &_collapse2_fminlCpp, 5},
    {"_collapse2_fmodeCpp", (DL_FUNC) &_collapse2_fmodeCpp, 6},
    {"_collapse2_fmodelCpp", (DL_FUNC) &_collapse2_fmodelCpp, 6},
    {"_collapse2_fmodemCpp", (DL_FUNC) &_collapse2_fmodemCpp, 7},
    {"_collapse2_fnobsCpp", (DL_FUNC) &_collapse2_fnobsCpp, 3},
    {"_collapse2_fnobsmCpp", (DL_FUNC) &_collapse2_fnobsmCpp, 4},
    {"_collapse2_fnobslCpp", (DL_FUNC) &_collapse2_fnobslCpp, 4},
    {"_collapse2_fprodCpp", (DL_FUNC) &_collapse2_fprodCpp, 4},
    {"_collapse2_fprodmCpp", (DL_FUNC) &_collapse2_fprodmCpp, 5},
    {"_collapse2_fprodlCpp", (DL_FUNC) &_collapse2_fprodlCpp, 5},
    {"_collapse2_fscaleCpp", (DL_FUNC) &_collapse2_fscaleCpp, 7},
    {"_collapse2_fscalemCpp", (DL_FUNC) &_collapse2_fscalemCpp, 7},
    {"_collapse2_fscalelCpp", (DL_FUNC) &_collapse2_fscalelCpp, 7},
    {"_collapse2_fsumCpp", (DL_FUNC) &_collapse2_fsumCpp, 4},
    {"_collapse2_fsummCpp", (DL_FUNC) &_collapse2_fsummCpp, 5},
    {"_collapse2_fsumlCpp", (DL_FUNC) &_collapse2_fsumlCpp, 5},
    {"_collapse2_fvarsdCpp", (DL_FUNC) &_collapse2_fvarsdCpp, 8},
    {"_collapse2_fvarsdmCpp", (DL_FUNC) &_collapse2_fvarsdmCpp, 9},
    {"_collapse2_fvarsdlCpp", (DL_FUNC) &_collapse2_fvarsdlCpp, 9},
    {"_collapse2_mrtl", (DL_FUNC) &_collapse2_mrtl, 3},
    {"_collapse2_mctl", (DL_FUNC) &_collapse2_mctl, 3},
    {"_collapse2_qFCpp", (DL_FUNC) &_collapse2_qFCpp, 2},
    {"_collapse2_qGCpp", (DL_FUNC) &_collapse2_qGCpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_collapse2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
